#!/opt/metasploit/ruby/bin/framework-ruby
# -*- coding: binary -*-
#
# $Id$
#
# This tool will collect, export, and import ROP and JOP gadgets1
# from various file formats (PE, ELF, Macho)
# $Revision$
#
# Jop Gadgets support by Bourbon Jean-marie (kmkz):
# 	[1.0] Added JoP gadget research  (July 2014)
# 	[1.1] Jump Far (jmpf) support, Initializer gadget research, call gadgets optimisations (November 2014)
#	[1.2] Basic dispatcher (jop) gadget research  and optimisations (August 2015)


msfbase = __FILE__
while File.symlink?(msfbase)
	msfbase = File.expand_path(File.readlink(msfbase), File.dirname(msfbase))
end

$:.unshift(File.expand_path(File.join(File.dirname(msfbase), 'lib')))
require 'msfenv'

$:.unshift(ENV['MSF_LOCAL_LIB']) if ENV['MSF_LOCAL_LIB']

require 'rex'
require 'rex/ropbuilder'
require 'rex/ui/text/output/stdio'
require 'rex/ui/text/color'
require 'optparse'

def opt2i(o)
	o.index("0x")==0 ? o.hex : o.to_i
end

opts = {}
color = true

# Set options:
opt = OptionParser.new
opt.banner = "\n
		***************************************************
		*        [MSFROP enhanced version v1.1]           *
		* Jop Gadgets support by Bourbon Jean-marie (kmkz)*
		*   For more info please refer to msfrop headers  *
		***************************************************\n
    [+] Usage #{$PROGRAM_NAME} <option> [targets]\n\n
"
opt.separator('')
opt.separator('Options:')

opt.on('-d', '--depth [size]', 'Number of maximum bytes to backwards disassemble from return instructions') do |d|
	opts[:depth] = opt2i(d)
end

opt.on('-s', '--search [regex]', 'Search for gadgets matching a regex, match intel syntax or raw bytes') do |regex|
	opts[:pattern] = regex
end

opt.on('-j', '--jop', 'Search for jump oriented gadgets (intel syntax)') do 
	opts[:jop] = true
end

opt.on('-I', '--init', 'Search for initializer gadget (intel syntax)') do 
	opts[:init] = true
end

opt.on('-D', '--dispatch', 'Search for basic dispatcher gadget (intel syntax)') do 
	opts[:dispatch] = true
end

opt.on('-n', '--nocolor', 'Disable color. Useful for piping to other tools like the less and more commands') do
	color = false
end

opt.on('-x', '--export [filename]', 'Export gadgets to CSV format') do |csv|
	opts[:export] = csv
end

opt.on('-i', '--import [filename]', 'Import gadgets from previous collections') do |csv|
	opts[:import] = csv
end

opt.on('-v', '--verbose', 'Output very verbosely') do
	opts[:verbose] = true
end

opt.on_tail('-h', '--help', 'Show this message') do
	puts opt
	exit(1)
end

begin
	opt.parse!
rescue OptionParser::InvalidOption
	puts "Invalid option, try -h for usage\n"
	exit(1)
end

if opts.empty? and (ARGV.empty? or ARGV.nil?)
	puts "no options"
	puts opt
	exit(1)
end

# Set defaults as a non verbose ROP gadgets research:
opts[:depth] ||= 8
gadgets = []

if opts[:import].nil?
	files = []
	ARGV.each do |file|
		
	if(File.directory?(file))
		dir = Dir.open(file)
		dir.entries.each do |ent|
			path = File.join(file, ent)
			next if not File.file?(path)
			files << File.join(path)
	end
	else
		files << file
	end
end
  
ropbuilder = Rex::RopBuilder::RopCollect.new

# Main loop:
files.each do |file|
	    
	# Jump Oriented Support:
	if opts[:jop]
		jmp, jmpf, call = []
		ropbuilder = Rex::RopBuilder::RopCollect.new(file)
		ropbuilder.print_msg("Collecting Jump Oriented gadgets from %bld%cya#{file}%clr\n", color)
		
		# Here you can add new JoP gadgets here:
		jmp   = ropbuilder.collect(opts[:depth], "\xeb") # \xeb= jmp
		jmpf  = ropbuilder.collect(opts[:depth], "\xea") # \xea= jmp far 
		call   = ropbuilder.collect(opts[:depth], "\xe8") # \xe8= call (\xff not so fun..)
		
		ropbuilder.print_msg("Found %grn#{jmp.count + jmpf.count + call.count}%clr Jump Oriented gadgets\n\n", color)
		
	elsif opts[:init]
		popa = []
		ropbuilder = Rex::RopBuilder::RopCollect.new(file)
		ropbuilder.print_msg("Collecting Initializer gadget from %bld%cya#{file}%clr\n", color)
		
		popa   = ropbuilder.collect(opts[:depth], "\x61") # \x61= popa(d)
	
		ropbuilder.print_msg("Found %grn#{popa.count}%clr Jump Oriented gadgets\n\n", color)
		
	elsif opts[:dispatch]
		addjmp = []
		ropbuilder = Rex::RopBuilder::RopCollect.new(file)
		ropbuilder.print_msg("Collecting basic Dispatcher gadget from %bld%cya#{file}%clr\n", color)
		
		addjmp   = ropbuilder.collect(opts[:depth], "\xeb\x05") # \xeb= jmp +  \x05= add eax,value   (little endian)
	
		ropbuilder.print_msg("Found %grn#{addjmp.count}%clr Jump Oriented gadgets\n\n", color)
		
	else
		# Return Oriented:
		ret, retn = []
		ropbuilder = Rex::RopBuilder::RopCollect.new(file)
		ropbuilder.print_msg("Collecting Return Oriented gadgets from %bld%cya#{file}%clr\n", color)
		retn = ropbuilder.collect(opts[:depth], "\xc2")  # \xc2 retn
		ret  = ropbuilder.collect(opts[:depth], "\xc3")   # \xc3 ret
		ropbuilder.print_msg("Found %grn#{ret.count + retn.count}%clr Return Oriented gadgets\n\n", color)
	end
	
				#######################################
				#	Compile a list of all ROP & JOP gadgets from all files     #
				#######################################
	
				
	# Jop gadgets option:
	if opts[:jop]
		
		# Direct JMP loop:
		jmp.each do |gadget|
			gadgets << gadget
			
			if opts[:verbose]
				ropbuilder.print_msg("#{gadget[:file]} direct jump gadget: %bld%grn#{gadget[:address]}%clr\n", color)
				ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
			end
			
			 #  CALL  loop:
			call.each do |gadget|
				gadgets << gadget
			
				if opts[:verbose]
					ropbuilder.print_msg("#{gadget[:file]} call gadget: %bld%grn#{gadget[:address]}%clr\n", color)
					ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
				end		
		
			       #  JMP FAR  loop:
				jmpf.each do |gadget|
					gadgets << gadget
				
					if opts[:verbose]
						ropbuilder.print_msg("#{gadget[:file]} jump far gadget: %bld%grn#{gadget[:address]}%clr\n", color)
						ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
					end
				end
			end
		end
	elsif opts[:init]
		
		# Initializer loop:
		popa.each do |gadget|
			gadgets << gadget
			
			if opts[:verbose]
				ropbuilder.print_msg("#{gadget[:file]} initializer gadget: %bld%grn#{gadget[:address]}%clr\n", color)
				ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
			end
		end
	elsif opts[:dispatch]
		
		# Dispatcher loop:
		addjmp.each do |gadget|
			gadgets << gadget
			
			if opts[:verbose]
				ropbuilder.print_msg("#{gadget[:file]} basic dispatcher gadget: %bld%grn#{gadget[:address]}%clr\n", color)
				ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
			end
		end
	###########
	#  Rop gadgets #
	###########
	else
		ret.each do |gadget|
			gadgets << gadget
			if opts[:verbose]
				ropbuilder.print_msg("#{gadget[:file]} rop gadget: %bld%grn#{gadget[:address]}%clr\n", color)
				ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
			end
		end
	end
	
	ropbuilder.print_msg("Found %bld%grn#{gadgets.count}%clr gadgets total\n\n", color)
end


# Import from file:
if opts[:import]

	ropbuilder = Rex::RopBuilder::RopCollect.new()
	ropbuilder.print_msg("Importing gadgets from %bld%cya#{opts[:import]}\n", color)
	gadgets = ropbuilder.import(opts[:import])

	gadgets.each do |gadget|
		ropbuilder.print_msg("gadget: %bld%cya#{gadget[:address]}%clr\n", color)
		ropbuilder.print_msg(gadget[:disasm] + "\n", color)
	end

	ropbuilder.print_msg("Imported %grn#{gadgets.count}%clr gadgets\n", color)
end

# Search by pattern matching:
if opts[:pattern]
	matches = ropbuilder.pattern_search(opts[:pattern])
	if opts[:verbose]
		ropbuilder.print_msg("Found %grn#{matches.count}%clr matches\n", color)
	end
end

# Export gadgets in CSV file:
if opts[:export]
	ropbuilder.print_msg("Exporting %grn#{gadgets.count}%clr gadgets to %bld%cya#{opts[:export]}%clr\n", color)
	csv = ropbuilder.to_csv(gadgets)

		if csv.nil?
			exit(1)
		end

		begin
			fd = File.new(opts[:export], 'w')
			fd.puts csv
			fd.close
		rescue
			puts "Error writing #{opts[:export]} file"
			exit(1)
		end
		ropbuilder.print_msg("%bld%redSuccess!%clr gadgets exported to %bld%cya#{opts[:export]}%clr\n", color)
	end
end


