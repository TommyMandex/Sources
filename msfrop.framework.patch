--- /usr/bin/msfrop.framework.backup	2014-07-29 05:43:30.695481849 +0200
+++ /usr/bin/msfrop.framework	2014-07-29 07:05:17.042701544 +0200
@@ -3,10 +3,13 @@
 #
 # $Id$
 #
-# This tool will collect, export, and import ROP gadgets
+# This tool will collect, export, and import ROP and JOP gadgets
 # from various file formats (PE, ELF, Macho)
 # $Revision$
 #
+# Jop Gadgets support:
+# modified on July 2014 by Bourbon Jean-marie (kmkz)
+
 
 msfbase = __FILE__
 while File.symlink?(msfbase)
@@ -18,7 +21,6 @@
 require 'msfenv'
 
 
-
 $:.unshift(ENV['MSF_LOCAL_LIB']) if ENV['MSF_LOCAL_LIB']
 
 require 'rex'
@@ -39,6 +41,7 @@
 opt.separator('')
 opt.separator('Options:')
 
+
 opt.on('-d', '--depth [size]', 'Number of maximum bytes to backwards disassemble from return instructions') do |d|
   opts[:depth] = opt2i(d)
 end
@@ -47,6 +50,10 @@
   opts[:pattern] = regex
 end
 
+opt.on('-j', '--jop', 'Search for jump oriented gadgets (intel syntax)') do 
+  opts[:jop] = true
+end
+
 opt.on('-n', '--nocolor', 'Disable color. Useful for piping to other tools like the less and more commands') do
   color = false
 end
@@ -104,30 +111,59 @@
   ropbuilder = Rex::RopBuilder::RopCollect.new
 
   files.each do |file|
-    ret, retn = []
-    ropbuilder = Rex::RopBuilder::RopCollect.new(file)
-    ropbuilder.print_msg("Collecting gadgets from %bld%cya#{file}%clr\n", color)
-    retn = ropbuilder.collect(opts[:depth], "\xc2") # \xc2 retn
-    ret = ropbuilder.collect(opts[:depth], "\xc3")  # \xc3 ret
-    ropbuilder.print_msg("Found %grn#{ret.count + retn.count}%clr gadgets\n\n", color)
-
-    # compile a list of all gadgets from all files
-    ret.each do |gadget|
-      gadgets << gadget
-      if opts[:verbose]
-        ropbuilder.print_msg("#{gadget[:file]} gadget: %bld%grn#{gadget[:address]}%clr\n", color)
-        ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
-      end
+  
+    # Jump Oriented Support:
+    if opts[:jop]
+      jmp, call = []
+      ropbuilder = Rex::RopBuilder::RopCollect.new(file)
+      ropbuilder.print_msg("Collecting gadgets from %bld%cya#{file}%clr\n", color)
+      jmp   = ropbuilder.collect(opts[:depth], "\xeb") # \xeb jmp
+      call  = ropbuilder.collect(opts[:depth], "\xff") # \xff call 
+      ropbuilder.print_msg("Found %grn#{jmp.count + call.count}%clr Jump Oriented gadgets\n\n", color)
+    else
+      # Return Oriented:
+      ret, retn = []
+      ropbuilder = Rex::RopBuilder::RopCollect.new(file)
+      ropbuilder.print_msg("Collecting gadgets from %bld%cya#{file}%clr\n", color)
+      retn = ropbuilder.collect(opts[:depth], "\xc2")  # \xc2 retn
+      ret  = ropbuilder.collect(opts[:depth], "\xc3")  # \xc3 ret
+      ropbuilder.print_msg("Found %grn#{ret.count + retn.count}%clr Return Oriented gadgets\n\n", color)
     end
+    
+    # compile a list of all ROP & JOP gadgets from all files
+    if opts[:jop]
+        jmp.each do |gadget|
+        gadgets << gadget
+        if opts[:verbose]
+          ropbuilder.print_msg("#{gadget[:file]} gadget: %bld%grn#{gadget[:address]}%clr\n", color)
+          ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
+        end
+      end
+      
+      call.each do |gadget|
+        gadgets << gadget
+        if opts[:verbose]
+          ropbuilder.print_msg("#{gadget[:file]} gadget: %bld%grn#{gadget[:address]}%clr\n", color)
+          ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
+        end
+      end
+    else
+        ret.each do |gadget|
+        gadgets << gadget
+        if opts[:verbose]
+          ropbuilder.print_msg("#{gadget[:file]} gadget: %bld%grn#{gadget[:address]}%clr\n", color)
+          ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
+        end
+      end
 
-    retn.each do |gadget|
-      gadgets << gadget
-      if opts[:verbose]
-        ropbuilder.print_msg("#{gadget[:file]} gadget: %bld%grn#{gadget[:address]}%clr\n", color)
-        ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
+      retn.each do |gadget|
+        gadgets << gadget
+        if opts[:verbose]
+          ropbuilder.print_msg("#{gadget[:file]} gadget: %bld%grn#{gadget[:address]}%clr\n", color)
+          ropbuilder.print_msg("#{gadget[:disasm]}\n", color)
+        end
       end
     end
-    
   end
 
   ropbuilder.print_msg("Found %bld%grn#{gadgets.count}%clr gadgets total\n\n", color)
